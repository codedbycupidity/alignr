rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Events collection
    match /events/{eventId} {
      // Allow authenticated users to create events
      allow create: if request.auth != null;

      // Allow anyone to read public events
      allow read: if resource.data.isPublic == true ||
                     (request.auth != null && request.auth.uid == resource.data.organizerId);

      // Allow organizer to update/delete their events
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.organizerId;

      // Participants subcollection
      match /participants/{participantId} {
        // Anyone can read participants of public events
        allow read: if get(/databases/$(database)/documents/events/$(eventId)).data.isPublic == true;

        // Organizer can manage participants
        allow write: if request.auth != null &&
                        request.auth.uid == get(/databases/$(database)/documents/events/$(eventId)).data.organizerId;

        // Participants can add themselves
        allow create: if true;
      }

      // Blocks subcollection
      match /blocks/{blockId} {
        // Anyone can read blocks of public events
        allow read: if get(/databases/$(database)/documents/events/$(eventId)).data.isPublic == true;

        // Organizer and participants can create/update blocks
        allow create, update: if true;

        // Only organizer can delete blocks
        allow delete: if request.auth != null &&
                         request.auth.uid == get(/databases/$(database)/documents/events/$(eventId)).data.organizerId;
      }

      // Availability subcollection
      match /availability/{participantId} {
        // Anyone can read availability of public events
        allow read: if get(/databases/$(database)/documents/events/$(eventId)).data.isPublic == true;

        // Participants can create/update their own availability
        allow create, update: if true;

        // Only organizer can delete availability
        allow delete: if request.auth != null &&
                         request.auth.uid == get(/databases/$(database)/documents/events/$(eventId)).data.organizerId;
      }

      // Analytics subcollection (for Snowflake insights)
      match /analytics/{docId} {
        // Anyone can read analytics
        allow read: if true;

        // Cloud Functions can write (will be authenticated as admin)
        // Organizer can also write
        allow write: if request.auth != null;
      }
    }
  }
}
